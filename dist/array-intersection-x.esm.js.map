{"version":3,"sources":["../src/array-intersection-x.js"],"names":[],"mappings":";;AAAA,OAAO,MAAP,MAAmB,gBAAnB;AACA,OAAO,MAAP,MAAmB,gBAAnB;AACA,OAAO,IAAP,MAAiB,cAAjB;AACA,OAAO,aAAP,MAA0B,kBAA1B;AACA,OAAO,KAAP,MAAkB,UAAlB;IAEO,K,GAAS,KAAK,CAAC,S,CAAf,K;;AAEP,IAAM,OAAO,GAAG,SAAS,MAAT,CAAgB,KAAhB,EAAuB;AACrC,SAAO,KAAK,CAAC,KAAD,CAAL,KAAiB,KAAxB;AACD,CAFD,C,CAIA;AACA;;AACA;;;;;;;;AAQA;;;AACA,eAAe,SAAS,YAAT,GAAwB;AAAA;;AACrC;AACA,MAAM,MAAM,GAAG,MAAM,CAAC,SAAD,EAAY,OAAZ,CAArB;;AAEA,MAAI,MAAM,CAAC,MAAP,GAAgB,CAApB,EAAuB;AACrB,WAAO,EAAP;AACD;;AAED,SAAO,MAAM,CACX,KAAK,CAAC,IAAN,CAAW,MAAX,CADW,EAEX,UAAC,GAAD,EAAM,KAAN,EAAgB;AAAA;;AAAA;;AACd,QAAM,UAAU,GACd,IAAI,CAAC,MAAD,EAAS,UAAC,KAAD,EAAW;AAAA;;AACtB,aAAO,aAAa,CAAC,KAAD,EAAQ,KAAR,CAAb,KAAgC,KAAvC;AACD,KAFG,YAAJ,KAEO,KAHT;;AAKA,QAAI,UAAU,IAAI,aAAa,CAAC,GAAD,EAAM,KAAN,CAAb,KAA8B,KAAhD,EAAuD;AACrD,MAAA,GAAG,CAAC,GAAG,CAAC,MAAL,CAAH,GAAkB,KAAlB;AACD;;AAED,WAAO,GAAP;AACD,GAbU,aAcX,EAdW,CAAb;AAgBD","file":"array-intersection-x.esm.js","sourcesContent":["import filter from 'array-filter-x';\nimport reduce from 'array-reduce-x';\nimport some from 'array-some-x';\nimport arrayincludes from 'array-includes-x';\nimport isNil from 'is-nil-x';\n\nconst {shift} = Array.prototype;\n\nconst notNill = function notNil(value) {\n  return isNil(value) === false;\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * This method creates an array of unique values that are included in all given\n * arrays using SameValueZero for equality comparisons. The order and references\n * of result values are determined by the first array.\n *\n * @param {...Array} [array] - The arrays to inspect.\n * @returns {Array} Returns the new array of intersecting values.\n */\n// eslint-enable jsdoc/check-param-names\nexport default function intersection() {\n  /* eslint-disable-next-line prefer-rest-params */\n  const arrays = filter(arguments, notNill);\n\n  if (arrays.length < 1) {\n    return [];\n  }\n\n  return reduce(\n    shift.call(arrays),\n    (acc, value) => {\n      const isExcluded =\n        some(arrays, (array) => {\n          return arrayincludes(array, value) === false;\n        }) === false;\n\n      if (isExcluded && arrayincludes(acc, value) === false) {\n        acc[acc.length] = value;\n      }\n\n      return acc;\n    },\n    [],\n  );\n}\n"]}